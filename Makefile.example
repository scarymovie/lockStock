# Путь к бинарному файлу migrate
MIGRATE := $(shell go env GOPATH)/bin/migrate

# Загрузим переменные окружения из .env файла перед запуском команд
export $(shell cat .env | grep -v '^#' | xargs)

# Параметры базы данных, которые будут извлекаться из .env файла
DB_HOST := localhost
DB_PORT := 9331
DB_USER := db_user
DB_PASSWORD := db_password
DB_NAME := db_database

# Собираем URL подключения
DB_URL := postgres://$(DB_USER):$(DB_PASSWORD)@$(DB_HOST):$(DB_PORT)/$(DB_NAME)?sslmode=disable

# Папка с миграциями
MIGRATIONS_FOLDER := internal/infrastructure/db/migrations

# Команда для создания новой миграции
.PHONY: create-migration
create-migration:
	@read -p "Enter migration name: " name; \
	$(MIGRATE) create -ext sql -dir $(MIGRATIONS_FOLDER) -seq $$name

# Команда для выполнения миграций
.PHONY: migrate-up
migrate-up:
	@echo "Connecting to database with URL: $(DB_URL)"
	$(MIGRATE) -path $(MIGRATIONS_FOLDER) -database $(DB_URL) up

# Команда для отката миграций
.PHONY: migrate-down
migrate-down:
	$(MIGRATE) -path $(MIGRATIONS_FOLDER) -database $(DB_URL) down

# Команда для выполнения одной миграции вперед
.PHONY: migrate-up-one
migrate-up-one:
	$(MIGRATE) -path $(MIGRATIONS_FOLDER) -database $(DB_URL) up 1

# Команда для отката одной миграции
.PHONY: migrate-down-one
migrate-down-one:
	$(MIGRATE) -path $(MIGRATIONS_FOLDER) -database $(DB_URL) down 1


.PHONY: check-env
check-env:
	@echo "DB_USER=$(DB_USER)"
	@echo "DB_PASSWORD=$(DB_PASSWORD)"
	@echo "DB_HOST=$(DB_HOST)"
	@echo "DB_PORT=$(DB_PORT)"
	@echo "DB_DATABASE=$(DB_NAME)"
